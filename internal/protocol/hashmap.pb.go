// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/roy2220/plainkv/internal/protocol/hashmap.proto

package protocol

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type HashMapInfo struct {
	SlotDirsAddr         int64 `protobuf:"varint,1,opt,name=slot_dirs_addr,json=slotDirsAddr,proto3" json:"slot_dirs_addr,omitempty"`
	SlotDirCount         int64 `protobuf:"varint,2,opt,name=slot_dir_count,json=slotDirCount,proto3" json:"slot_dir_count,omitempty"`
	MaxSlotDirCountShift int64 `protobuf:"varint,3,opt,name=max_slot_dir_count_shift,json=maxSlotDirCountShift,proto3" json:"max_slot_dir_count_shift,omitempty"`
	SlotCount            int64 `protobuf:"varint,4,opt,name=slot_count,json=slotCount,proto3" json:"slot_count,omitempty"`
	MinSlotCountShift    int64 `protobuf:"varint,5,opt,name=min_slot_count_shift,json=minSlotCountShift,proto3" json:"min_slot_count_shift,omitempty"`
	ItemCount            int64 `protobuf:"varint,6,opt,name=item_count,json=itemCount,proto3" json:"item_count,omitempty"`
	PayloadSize          int64 `protobuf:"varint,7,opt,name=payload_size,json=payloadSize,proto3" json:"payload_size,omitempty"`
}

func (m *HashMapInfo) Reset()         { *m = HashMapInfo{} }
func (m *HashMapInfo) String() string { return proto.CompactTextString(m) }
func (*HashMapInfo) ProtoMessage()    {}
func (*HashMapInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a79ea630ee854b6, []int{0}
}
func (m *HashMapInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HashMapInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HashMapInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HashMapInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HashMapInfo.Merge(m, src)
}
func (m *HashMapInfo) XXX_Size() int {
	return m.Size()
}
func (m *HashMapInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_HashMapInfo.DiscardUnknown(m)
}

var xxx_messageInfo_HashMapInfo proto.InternalMessageInfo

func (m *HashMapInfo) GetSlotDirsAddr() int64 {
	if m != nil {
		return m.SlotDirsAddr
	}
	return 0
}

func (m *HashMapInfo) GetSlotDirCount() int64 {
	if m != nil {
		return m.SlotDirCount
	}
	return 0
}

func (m *HashMapInfo) GetMaxSlotDirCountShift() int64 {
	if m != nil {
		return m.MaxSlotDirCountShift
	}
	return 0
}

func (m *HashMapInfo) GetSlotCount() int64 {
	if m != nil {
		return m.SlotCount
	}
	return 0
}

func (m *HashMapInfo) GetMinSlotCountShift() int64 {
	if m != nil {
		return m.MinSlotCountShift
	}
	return 0
}

func (m *HashMapInfo) GetItemCount() int64 {
	if m != nil {
		return m.ItemCount
	}
	return 0
}

func (m *HashMapInfo) GetPayloadSize() int64 {
	if m != nil {
		return m.PayloadSize
	}
	return 0
}

type HashSlot struct {
	ItemInfos []HashItemInfo `protobuf:"bytes,1,rep,name=item_infos,json=itemInfos,proto3" json:"item_infos"`
	Bin       BytesView      `protobuf:"bytes,2,opt,name=bin,proto3,customtype=BytesView" json:"bin"`
}

func (m *HashSlot) Reset()         { *m = HashSlot{} }
func (m *HashSlot) String() string { return proto.CompactTextString(m) }
func (*HashSlot) ProtoMessage()    {}
func (*HashSlot) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a79ea630ee854b6, []int{1}
}
func (m *HashSlot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HashSlot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HashSlot.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HashSlot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HashSlot.Merge(m, src)
}
func (m *HashSlot) XXX_Size() int {
	return m.Size()
}
func (m *HashSlot) XXX_DiscardUnknown() {
	xxx_messageInfo_HashSlot.DiscardUnknown(m)
}

var xxx_messageInfo_HashSlot proto.InternalMessageInfo

func (m *HashSlot) GetItemInfos() []HashItemInfo {
	if m != nil {
		return m.ItemInfos
	}
	return nil
}

type HashItemInfo struct {
	KeySum    uint64 `protobuf:"fixed64,1,opt,name=key_sum,json=keySum,proto3" json:"key_sum,omitempty"`
	KeySize   int64  `protobuf:"varint,2,opt,name=key_size,json=keySize,proto3" json:"key_size,omitempty"`
	ValueSize int64  `protobuf:"varint,3,opt,name=value_size,json=valueSize,proto3" json:"value_size,omitempty"`
}

func (m *HashItemInfo) Reset()         { *m = HashItemInfo{} }
func (m *HashItemInfo) String() string { return proto.CompactTextString(m) }
func (*HashItemInfo) ProtoMessage()    {}
func (*HashItemInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a79ea630ee854b6, []int{2}
}
func (m *HashItemInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HashItemInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HashItemInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HashItemInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HashItemInfo.Merge(m, src)
}
func (m *HashItemInfo) XXX_Size() int {
	return m.Size()
}
func (m *HashItemInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_HashItemInfo.DiscardUnknown(m)
}

var xxx_messageInfo_HashItemInfo proto.InternalMessageInfo

func (m *HashItemInfo) GetKeySum() uint64 {
	if m != nil {
		return m.KeySum
	}
	return 0
}

func (m *HashItemInfo) GetKeySize() int64 {
	if m != nil {
		return m.KeySize
	}
	return 0
}

func (m *HashItemInfo) GetValueSize() int64 {
	if m != nil {
		return m.ValueSize
	}
	return 0
}

func init() {
	proto.RegisterType((*HashMapInfo)(nil), "plainkv.HashMapInfo")
	proto.RegisterType((*HashSlot)(nil), "plainkv.HashSlot")
	proto.RegisterType((*HashItemInfo)(nil), "plainkv.HashItemInfo")
}

func init() {
	proto.RegisterFile("github.com/roy2220/plainkv/internal/protocol/hashmap.proto", fileDescriptor_0a79ea630ee854b6)
}

var fileDescriptor_0a79ea630ee854b6 = []byte{
	// 437 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xc1, 0x6e, 0xd3, 0x30,
	0x1c, 0xc6, 0x9b, 0x75, 0xb4, 0xab, 0x5b, 0x21, 0xcd, 0x1a, 0x22, 0x20, 0x91, 0x8d, 0xc2, 0x61,
	0x07, 0x68, 0x50, 0x91, 0x38, 0xec, 0x46, 0x40, 0x88, 0x1d, 0xb8, 0x34, 0x12, 0x07, 0x2e, 0x96,
	0xd3, 0x38, 0x8d, 0x95, 0xd8, 0x8e, 0x62, 0x67, 0x2c, 0x7b, 0x0a, 0xde, 0x81, 0x97, 0xd9, 0x71,
	0x47, 0xc4, 0x61, 0x42, 0xed, 0x8b, 0xa0, 0xbf, 0x1d, 0x20, 0x3b, 0x72, 0xf3, 0xff, 0xfb, 0x7e,
	0xff, 0x2f, 0xce, 0x97, 0xa0, 0xb3, 0x0d, 0x37, 0x79, 0x93, 0x2c, 0xd6, 0x4a, 0x84, 0xb5, 0x6a,
	0x97, 0xcb, 0xe5, 0xab, 0xb0, 0x2a, 0x29, 0x97, 0xc5, 0x45, 0xc8, 0xa5, 0x61, 0xb5, 0xa4, 0x65,
	0x58, 0xd5, 0xca, 0xa8, 0xb5, 0x2a, 0xc3, 0x9c, 0xea, 0x5c, 0xd0, 0x6a, 0x61, 0x05, 0x3c, 0xee,
	0xc0, 0xc7, 0x2f, 0x7b, 0x21, 0x1b, 0xb5, 0x51, 0x6e, 0x21, 0x69, 0x32, 0x3b, 0xd9, 0xc1, 0x9e,
	0xdc, 0xde, 0xfc, 0xfb, 0x1e, 0x9a, 0x7e, 0xa4, 0x3a, 0xff, 0x44, 0xab, 0x73, 0x99, 0x29, 0xfc,
	0x1c, 0xdd, 0xd7, 0xa5, 0x32, 0x24, 0xe5, 0xb5, 0x26, 0x34, 0x4d, 0x6b, 0xdf, 0x3b, 0xf1, 0x4e,
	0x87, 0xab, 0x19, 0xa8, 0xef, 0x79, 0xad, 0xdf, 0xa6, 0x69, 0xdd, 0xa7, 0xc8, 0x5a, 0x35, 0xd2,
	0xf8, 0x7b, 0x77, 0xa8, 0x77, 0xa0, 0xe1, 0x37, 0xc8, 0x17, 0xf4, 0x92, 0xdc, 0x25, 0x89, 0xce,
	0x79, 0x66, 0xfc, 0xa1, 0xe5, 0x8f, 0x04, 0xbd, 0x8c, 0x7b, 0x2b, 0x31, 0x78, 0xf8, 0x09, 0x42,
	0x76, 0xc7, 0x25, 0xef, 0x5b, 0x72, 0x02, 0x8a, 0x8b, 0x0d, 0xd1, 0x91, 0xe0, 0x92, 0xfc, 0x43,
	0xba, 0xc8, 0x7b, 0x16, 0x3c, 0x14, 0x5c, 0xc6, 0x7f, 0xd8, 0xbf, 0x79, 0xdc, 0x30, 0xd1, 0xe5,
	0x8d, 0x5c, 0x1e, 0x28, 0x2e, 0xef, 0x29, 0x9a, 0x55, 0xb4, 0x2d, 0x15, 0x4d, 0x89, 0xe6, 0x57,
	0xcc, 0x1f, 0x5b, 0x60, 0xda, 0x69, 0x31, 0xbf, 0x62, 0xf3, 0x02, 0x1d, 0x40, 0x49, 0x90, 0x8b,
	0xcf, 0xba, 0x34, 0x2e, 0x33, 0xa5, 0x7d, 0xef, 0x64, 0x78, 0x3a, 0x5d, 0x3e, 0x58, 0x74, 0xf5,
	0x2f, 0x00, 0x3b, 0x37, 0x4c, 0x40, 0x99, 0xd1, 0xfe, 0xf5, 0xed, 0xf1, 0xc0, 0x3d, 0x0a, 0x66,
	0x8d, 0x9f, 0xa1, 0x61, 0xc2, 0xa5, 0x2d, 0x6b, 0x16, 0x1d, 0x82, 0xfb, 0xf3, 0xf6, 0x78, 0x12,
	0xb5, 0x86, 0xe9, 0xcf, 0x9c, 0x7d, 0x5d, 0x81, 0x3b, 0xa7, 0x68, 0xd6, 0x4f, 0xc1, 0x0f, 0xd1,
	0xb8, 0x60, 0x2d, 0xd1, 0x8d, 0xb0, 0xdf, 0x62, 0xb4, 0x1a, 0x15, 0xac, 0x8d, 0x1b, 0x81, 0x1f,
	0xa1, 0x03, 0x6b, 0xc0, 0xa5, 0x5d, 0xff, 0x00, 0xc2, 0x85, 0xe1, 0x95, 0x2f, 0x68, 0xd9, 0x30,
	0x67, 0xba, 0xb2, 0x27, 0x56, 0x01, 0x3b, 0xfa, 0x70, 0xbd, 0x0d, 0xbc, 0x9b, 0x6d, 0xe0, 0xfd,
	0xda, 0x06, 0xde, 0xb7, 0x5d, 0x30, 0xb8, 0xd9, 0x05, 0x83, 0x1f, 0xbb, 0x60, 0xf0, 0xe5, 0xc5,
	0xff, 0xfc, 0x83, 0xc9, 0xc8, 0x9e, 0x5e, 0xff, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x84, 0x8b, 0xef,
	0xb5, 0xba, 0x02, 0x00, 0x00,
}

func (m *HashMapInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HashMapInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HashMapInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PayloadSize != 0 {
		i = encodeVarintHashmap(dAtA, i, uint64(m.PayloadSize))
		i--
		dAtA[i] = 0x38
	}
	if m.ItemCount != 0 {
		i = encodeVarintHashmap(dAtA, i, uint64(m.ItemCount))
		i--
		dAtA[i] = 0x30
	}
	if m.MinSlotCountShift != 0 {
		i = encodeVarintHashmap(dAtA, i, uint64(m.MinSlotCountShift))
		i--
		dAtA[i] = 0x28
	}
	if m.SlotCount != 0 {
		i = encodeVarintHashmap(dAtA, i, uint64(m.SlotCount))
		i--
		dAtA[i] = 0x20
	}
	if m.MaxSlotDirCountShift != 0 {
		i = encodeVarintHashmap(dAtA, i, uint64(m.MaxSlotDirCountShift))
		i--
		dAtA[i] = 0x18
	}
	if m.SlotDirCount != 0 {
		i = encodeVarintHashmap(dAtA, i, uint64(m.SlotDirCount))
		i--
		dAtA[i] = 0x10
	}
	if m.SlotDirsAddr != 0 {
		i = encodeVarintHashmap(dAtA, i, uint64(m.SlotDirsAddr))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *HashSlot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HashSlot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HashSlot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Bin.Size()
		i -= size
		if _, err := m.Bin.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintHashmap(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.ItemInfos) > 0 {
		for iNdEx := len(m.ItemInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ItemInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintHashmap(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *HashItemInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HashItemInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HashItemInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ValueSize != 0 {
		i = encodeVarintHashmap(dAtA, i, uint64(m.ValueSize))
		i--
		dAtA[i] = 0x18
	}
	if m.KeySize != 0 {
		i = encodeVarintHashmap(dAtA, i, uint64(m.KeySize))
		i--
		dAtA[i] = 0x10
	}
	if m.KeySum != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.KeySum))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func encodeVarintHashmap(dAtA []byte, offset int, v uint64) int {
	offset -= sovHashmap(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *HashMapInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SlotDirsAddr != 0 {
		n += 1 + sovHashmap(uint64(m.SlotDirsAddr))
	}
	if m.SlotDirCount != 0 {
		n += 1 + sovHashmap(uint64(m.SlotDirCount))
	}
	if m.MaxSlotDirCountShift != 0 {
		n += 1 + sovHashmap(uint64(m.MaxSlotDirCountShift))
	}
	if m.SlotCount != 0 {
		n += 1 + sovHashmap(uint64(m.SlotCount))
	}
	if m.MinSlotCountShift != 0 {
		n += 1 + sovHashmap(uint64(m.MinSlotCountShift))
	}
	if m.ItemCount != 0 {
		n += 1 + sovHashmap(uint64(m.ItemCount))
	}
	if m.PayloadSize != 0 {
		n += 1 + sovHashmap(uint64(m.PayloadSize))
	}
	return n
}

func (m *HashSlot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ItemInfos) > 0 {
		for _, e := range m.ItemInfos {
			l = e.Size()
			n += 1 + l + sovHashmap(uint64(l))
		}
	}
	l = m.Bin.Size()
	n += 1 + l + sovHashmap(uint64(l))
	return n
}

func (m *HashItemInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.KeySum != 0 {
		n += 9
	}
	if m.KeySize != 0 {
		n += 1 + sovHashmap(uint64(m.KeySize))
	}
	if m.ValueSize != 0 {
		n += 1 + sovHashmap(uint64(m.ValueSize))
	}
	return n
}

func sovHashmap(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozHashmap(x uint64) (n int) {
	return sovHashmap(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *HashMapInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHashmap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HashMapInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HashMapInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlotDirsAddr", wireType)
			}
			m.SlotDirsAddr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHashmap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SlotDirsAddr |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlotDirCount", wireType)
			}
			m.SlotDirCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHashmap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SlotDirCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSlotDirCountShift", wireType)
			}
			m.MaxSlotDirCountShift = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHashmap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxSlotDirCountShift |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlotCount", wireType)
			}
			m.SlotCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHashmap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SlotCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinSlotCountShift", wireType)
			}
			m.MinSlotCountShift = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHashmap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinSlotCountShift |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemCount", wireType)
			}
			m.ItemCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHashmap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayloadSize", wireType)
			}
			m.PayloadSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHashmap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PayloadSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHashmap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHashmap
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHashmap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HashSlot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHashmap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HashSlot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HashSlot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHashmap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHashmap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHashmap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ItemInfos = append(m.ItemInfos, HashItemInfo{})
			if err := m.ItemInfos[len(m.ItemInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bin", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHashmap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHashmap
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthHashmap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Bin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHashmap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHashmap
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHashmap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HashItemInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHashmap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HashItemInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HashItemInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeySum", wireType)
			}
			m.KeySum = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.KeySum = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeySize", wireType)
			}
			m.KeySize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHashmap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeySize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueSize", wireType)
			}
			m.ValueSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHashmap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValueSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHashmap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHashmap
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHashmap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHashmap(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHashmap
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHashmap
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHashmap
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthHashmap
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupHashmap
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthHashmap
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthHashmap        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHashmap          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupHashmap = fmt.Errorf("proto: unexpected end of group")
)
